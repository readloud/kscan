package database

import (
	"fmt"
	"net"
	"strings"
	"time"
)

func postgresqlCheck(Host string, Port int) (bool, error) {
	sendData := []byte{58, 0, 0, 0, 167, 65, 0, 0, 0, 0, 0, 0, 212, 7, 0, 0, 0, 0, 0, 0, 97, 100, 109, 105, 110, 46, 36, 99, 109, 100, 0, 0, 0, 0, 0, 255, 255, 255, 255, 19, 0, 0, 0, 16, 105, 115, 109, 97, 115, 116, 101, 114, 0, 1, 0, 0, 0, 0}
	getlogData := []byte{72, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 212, 7, 0, 0, 0, 0, 0, 0, 97, 100, 109, 105, 110, 46, 36, 99, 109, 100, 0, 0, 0, 0, 0, 1, 0, 0, 0, 33, 0, 0, 0, 2, 103, 101, 116, 76, 111, 103, 0, 16, 0, 0, 0, 115, 116, 97, 114, 116, 117, 112, 87, 97, 114, 110, 105, 110, 103, 115, 0, 0}
	conn, err := net.DialTimeout("tcp", fmt.Sprintf("%s:%v", Host, Port), 5*time.Second)
	if err != nil {
		return false, err
	}
	defer conn.Close()
	err = conn.SetReadDeadline(time.Now().Add(5 * time.Second))
	if err != nil {
		return false, err
	}
	_, err = conn.Write(sendData)
	if err != nil {
		return false, err
	}
	buf := make([]byte, 1024)
	count, err := conn.Read(buf)
	if err != nil {
		return false, err
	}
	text := string(buf[0:count])
	if strings.Contains(text, "ismaster") == false {
		return false, err

	}
	_, err = conn.Write(getlogData)
	if err != nil {
		return false, err
	}
	count, err = conn.Read(buf)
	if err != nil {
		return false, err
	}
	text = string(buf[0:count])
	if strings.Contains(text, "totalLinesWritten") == false {
		return false, err
	}
	return true, err
}
